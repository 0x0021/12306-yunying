name: 编译苹果版本 APP (arm64)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: macOS arm64 编译
    runs-on: macos-14

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装 Qt（带图表和多媒体）
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.6.1'
          host: 'mac'
          target: 'desktop'
          arch: 'clang_64'
          modules: 'qtcharts qtmultimedia'

      - name: 构建 arm64 项目
        run: |
          echo "QMAKE_APPLE_DEVICE_ARCHS = arm64" >> arm64.conf
          qmake yunying.pro QMAKE_EXTRA_CONF=arm64.conf
          make -j$(sysctl -n hw.logicalcpu)

      - name: 列出所有文件和目录
        run: ls -lR

      - name: 查找 .app 产物
        run: find . -name "*.app" -print

      - name: 用 macdeployqt 打包
        run: |
          APP_PATH=$(find . -name "yuny.app" | head -n 1)
          MACDEPLOYQT=$(find $Qt6_DIR -type f -name macdeployqt | head -n 1)
          if [ -d "$APP_PATH" ]; then
            if [ -x "$MACDEPLOYQT" ]; then
              "$MACDEPLOYQT" "$APP_PATH"
            else
              echo "macdeployqt not found"
              exit 1
            fi
          else
            echo "yuny.app not found, skip macdeployqt"
            exit 1
          fi

      - name: 压缩 yuny.app 为 zip
        run: |
          APP_PATH=$(find . -name "yuny.app" | head -n 1)
          if [ -d "$APP_PATH" ]; then
            zip -r yunying-macos-arm64.zip "$APP_PATH"
          else
            echo "yuny.app not found"
            exit 1
          fi

      - name: 生成 yuny-macos-arm64.dmg
        run: |
          APP_PATH=$(find . -name "yuny.app" | head -n 1)
          if [ -d "$APP_PATH" ]; then
            hdiutil create -volname "yunying" -srcfolder "$APP_PATH" -ov -format UDZO yunying-macos-arm64.dmg
          else
            echo "yuny.app not found"
            exit 1
          fi

      - name: 上传 zip 和 dmg
        uses: actions/upload-artifact@v4
        with:
          name: yunying-macos-arm64
          path: |
            yunying-macos-arm64.zip
            yunying-macos-arm64.dmg
          if-no-files-found: error

  # 仅在 pull_request 时发布 pre-release
  release:
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: yunying-macos-arm64

      - name: 生成 pre-release 名称
        id: preid
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DATE=$(date +%Y%m%d-%H%M%S)
          echo "tag=pr${PR_NUMBER}-pre-${DATE}" >> $GITHUB_OUTPUT
          echo "name=PR #${PR_NUMBER} Pre-release $DATE" >> $GITHUB_OUTPUT

      - name: 创建 Pre-release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.preid.outputs.tag }}
          release_name: ${{ steps.preid.outputs.name }}
          draft: false
          prerelease: true
          body: |
            自动发布的 PR 预发布包。
            关联 PR: #${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 zip 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: yunying-macos-arm64.zip
          asset_name: yunying-macos-arm64.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传 dmg 到 Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: yunying-macos-arm64.dmg
          asset_name: yunying-macos-arm64.dmg
          asset_content_type: application/x-apple-diskimage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
